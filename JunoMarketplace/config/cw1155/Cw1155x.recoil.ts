/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Expiration, Timestamp, Uint64, TokenAmount, Cw1155MintMsgForNullable_Metadata, Metadata, Trait, QueryMsg, Empty, Addr, AllBalancesResponse, Balance, TokenInfoResponseForEmpty, TokensResponse, ApprovedForAllResponse, Approval, BalanceResponse, BatchBalanceResponse, ContractInfoResponse, Null, IsApprovedForAllResponse, MinterResponse, NumTokensResponse, OwnershipForString, ArrayOfTokenApproval, TokenApproval } from "./Cw1155x.types";
import { Cw1155xQueryClient } from "./Cw1155x.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<Cw1155xQueryClient, QueryClientParams>({
  key: "cw1155xQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new Cw1155xQueryClient(client, contractAddress);
  }
});
export const balanceOfSelector = selectorFamily<BalanceResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["balanceOf"]>;
}>({
  key: "cw1155xBalanceOf",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.balanceOf(...params);
  }
});
export const balanceOfBatchSelector = selectorFamily<BatchBalanceResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["balanceOfBatch"]>;
}>({
  key: "cw1155xBalanceOfBatch",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.balanceOfBatch(...params);
  }
});
export const isApprovedForAllSelector = selectorFamily<IsApprovedForAllResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["isApprovedForAll"]>;
}>({
  key: "cw1155xIsApprovedForAll",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.isApprovedForAll(...params);
  }
});
export const tokenApprovalsSelector = selectorFamily<ArrayOfTokenApproval, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["tokenApprovals"]>;
}>({
  key: "cw1155xTokenApprovals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokenApprovals(...params);
  }
});
export const approvalsForAllSelector = selectorFamily<ApprovedForAllResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["approvalsForAll"]>;
}>({
  key: "cw1155xApprovalsForAll",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approvalsForAll(...params);
  }
});
export const allBalancesSelector = selectorFamily<AllBalancesResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["allBalances"]>;
}>({
  key: "cw1155xAllBalances",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allBalances(...params);
  }
});
export const supplySelector = selectorFamily<NumTokensResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["supply"]>;
}>({
  key: "cw1155xSupply",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.supply(...params);
  }
});
export const numTokensSelector = selectorFamily<NumTokensResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["numTokens"]>;
}>({
  key: "cw1155xNumTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.numTokens(...params);
  }
});
export const contractInfoSelector = selectorFamily<ContractInfoResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["contractInfo"]>;
}>({
  key: "cw1155xContractInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.contractInfo(...params);
  }
});
export const minterSelector = selectorFamily<MinterResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["minter"]>;
}>({
  key: "cw1155xMinter",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.minter(...params);
  }
});
export const tokenInfoSelector = selectorFamily<TokenInfoResponseForEmpty, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["tokenInfo"]>;
}>({
  key: "cw1155xTokenInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokenInfo(...params);
  }
});
export const allTokenInfoSelector = selectorFamily<TokenInfoResponseForEmpty, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["allTokenInfo"]>;
}>({
  key: "cw1155xAllTokenInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allTokenInfo(...params);
  }
});
export const tokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["tokens"]>;
}>({
  key: "cw1155xTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokens(...params);
  }
});
export const allTokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["allTokens"]>;
}>({
  key: "cw1155xAllTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allTokens(...params);
  }
});
export const extensionSelector = selectorFamily<Null, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["extension"]>;
}>({
  key: "cw1155xExtension",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.extension(...params);
  }
});
export const ownershipSelector = selectorFamily<OwnershipForString, QueryClientParams & {
  params: Parameters<Cw1155xQueryClient["ownership"]>;
}>({
  key: "cw1155xOwnership",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownership(...params);
  }
});