/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Expiration, Timestamp, Uint64, TokenAmount, Cw1155MintMsgForNullable_Metadata, Metadata, Trait, QueryMsg, Empty, Addr, AllBalancesResponse, Balance, TokenInfoResponseForEmpty, TokensResponse, ApprovedForAllResponse, Approval, BalanceResponse, BatchBalanceResponse, ContractInfoResponse, Null, IsApprovedForAllResponse, MinterResponse, NumTokensResponse, OwnershipForString, ArrayOfTokenApproval, TokenApproval } from "./Cw1155x.types";
export interface Cw1155xMsg {
  contractAddress: string;
  sender: string;
  sendBatch: ({
    batch,
    from,
    msg,
    to
  }: {
    batch: TokenAmount[];
    from?: string;
    msg?: Binary;
    to: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mintBatch: ({
    msgs,
    recipient
  }: {
    msgs: Cw1155MintMsgForNullable_Metadata[];
    recipient: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  burnBatch: ({
    batch,
    from
  }: {
    batch: TokenAmount[];
    from?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  approveAll: ({
    expires,
    operator
  }: {
    expires?: Expiration;
    operator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revokeAll: ({
    operator
  }: {
    operator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  send: ({
    amount,
    from,
    msg,
    to,
    tokenId
  }: {
    amount: Uint128;
    from?: string;
    msg?: Binary;
    to: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mint: ({
    msg,
    recipient
  }: {
    msg: Cw1155MintMsgForNullable_Metadata;
    recipient: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  burn: ({
    amount,
    from,
    tokenId
  }: {
    amount: Uint128;
    from?: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  approve: ({
    amount,
    expires,
    spender,
    tokenId
  }: {
    amount?: Uint128;
    expires?: Expiration;
    spender: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revoke: ({
    amount,
    spender,
    tokenId
  }: {
    amount?: Uint128;
    spender: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class Cw1155xMsgComposer implements Cw1155xMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.sendBatch = this.sendBatch.bind(this);
    this.mintBatch = this.mintBatch.bind(this);
    this.burnBatch = this.burnBatch.bind(this);
    this.approveAll = this.approveAll.bind(this);
    this.revokeAll = this.revokeAll.bind(this);
    this.send = this.send.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.approve = this.approve.bind(this);
    this.revoke = this.revoke.bind(this);
  }
  sendBatch = ({
    batch,
    from,
    msg,
    to
  }: {
    batch: TokenAmount[];
    from?: string;
    msg?: Binary;
    to: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          send_batch: {
            batch,
            from,
            msg,
            to
          }
        })),
        funds: _funds
      })
    };
  };
  mintBatch = ({
    msgs,
    recipient
  }: {
    msgs: Cw1155MintMsgForNullable_Metadata[];
    recipient: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint_batch: {
            msgs,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  burnBatch = ({
    batch,
    from
  }: {
    batch: TokenAmount[];
    from?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          burn_batch: {
            batch,
            from
          }
        })),
        funds: _funds
      })
    };
  };
  approveAll = ({
    expires,
    operator
  }: {
    expires?: Expiration;
    operator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          approve_all: {
            expires,
            operator
          }
        })),
        funds: _funds
      })
    };
  };
  revokeAll = ({
    operator
  }: {
    operator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke_all: {
            operator
          }
        })),
        funds: _funds
      })
    };
  };
  send = ({
    amount,
    from,
    msg,
    to,
    tokenId
  }: {
    amount: Uint128;
    from?: string;
    msg?: Binary;
    to: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          send: {
            amount,
            from,
            msg,
            to,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  mint = ({
    msg,
    recipient
  }: {
    msg: Cw1155MintMsgForNullable_Metadata;
    recipient: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            msg,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  burn = ({
    amount,
    from,
    tokenId
  }: {
    amount: Uint128;
    from?: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          burn: {
            amount,
            from,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  approve = ({
    amount,
    expires,
    spender,
    tokenId
  }: {
    amount?: Uint128;
    expires?: Expiration;
    spender: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          approve: {
            amount,
            expires,
            spender,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  revoke = ({
    amount,
    spender,
    tokenId
  }: {
    amount?: Uint128;
    spender: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke: {
            amount,
            spender,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
}