{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "This is like Cw721HandleMsg but we add a Mint command for an owner to make this stand-alone. You will likely want to remove mint and use other control logic in any contract that inherits this.",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auction"
      ],
      "properties": {
        "auction": {
          "type": "object",
          "required": [
            "auction_id"
          ],
          "properties": {
            "auction_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "royalty_fee"
      ],
      "properties": {
        "royalty_fee": {
          "type": "object",
          "required": [
            "contract_addr"
          ],
          "properties": {
            "contract_addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "royalty_admin"
      ],
      "properties": {
        "royalty_admin": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "all_royalty_fee"
      ],
      "properties": {
        "all_royalty_fee": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "calculate_price"
      ],
      "properties": {
        "calculate_price": {
          "type": "object",
          "required": [
            "amount",
            "nft_contract",
            "token_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "nft_contract": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "nft_auction"
      ],
      "properties": {
        "nft_auction": {
          "type": "object",
          "required": [
            "nft_contract",
            "token_id"
          ],
          "properties": {
            "nft_contract": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bid_history_by_auction_id"
      ],
      "properties": {
        "bid_history_by_auction_id": {
          "type": "object",
          "required": [
            "auction_id"
          ],
          "properties": {
            "auction_id": {
              "$ref": "#/definitions/Uint128"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bids_count"
      ],
      "properties": {
        "bids_count": {
          "type": "object",
          "required": [
            "auction_id"
          ],
          "properties": {
            "auction_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auction_by_contract"
      ],
      "properties": {
        "auction_by_contract": {
          "type": "object",
          "required": [
            "nft_contract"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "nft_contract": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auction_by_seller"
      ],
      "properties": {
        "auction_by_seller": {
          "type": "object",
          "required": [
            "seller"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "seller": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auction_by_amount"
      ],
      "properties": {
        "auction_by_amount": {
          "type": "object",
          "required": [
            "amount",
            "nft_contract"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "nft_contract": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auction_by_end_time"
      ],
      "properties": {
        "auction_by_end_time": {
          "type": "object",
          "required": [
            "end_time",
            "nft_contract"
          ],
          "properties": {
            "end_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "is_desc": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "nft_contract": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "not_started_auction"
      ],
      "properties": {
        "not_started_auction": {
          "type": "object",
          "required": [
            "nft_contract"
          ],
          "properties": {
            "is_desc": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "nft_contract": {
              "type": "string"
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auction_by_bidder"
      ],
      "properties": {
        "auction_by_bidder": {
          "type": "object",
          "required": [
            "bidder"
          ],
          "properties": {
            "bidder": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
